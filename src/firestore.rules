
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow authenticated users to read user profiles for leaderboards, etc.
    // Allow users to update ONLY their own document.
    // Allow admins to update ANY user document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Rules for the 'reward_requests' subcollection
      match /reward_requests/{requestId} {
        // Users can create and read their own requests
        allow create, read: if request.auth != null && request.auth.uid == userId;
        // Admins can update/delete any request
        allow update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
    }

    // This is a more efficient way for admins to list all requests
    // It requires a composite index on the collection group 'reward_requests'
    match /{path=**}/reward_requests/{requestId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Allow any authenticated user to read/create exchange requests.
    // Allow users to close/delete their own requests. Admins can do anything.
    match /exchange_requests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.creatorUserId == request.auth.uid;
      allow update, delete: if request.auth != null && (resource.data.creatorUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Allow any authenticated user to read/create familiar trade requests.
    // Only the target user can accept/decline. Only initiator can cancel.
    match /familiar_trade_requests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.initiatorUserId == request.auth.uid;
      allow update: if request.auth != null && (
        // Allow initiator to cancel if pending
        (resource.data.initiatorUserId == request.auth.uid && request.resource.data.status == 'отменено') ||
        // Allow target to accept/decline if pending
        (resource.data.targetUserId == request.auth.uid && (request.resource.data.status == 'принято' || request.resource.data.status == 'отклонено')) ||
        // Allow admins to do anything
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }


    // Allow anyone to read game settings, but only admins to write.
    match /game_settings/{settingId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
